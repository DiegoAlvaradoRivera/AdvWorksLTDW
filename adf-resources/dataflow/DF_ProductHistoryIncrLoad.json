{
	"name": "DF_ProductHistoryIncrLoad",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AdvWorksLTQuery",
						"type": "DatasetReference"
					},
					"name": "ProductsHistoryCurrentRows"
				},
				{
					"dataset": {
						"referenceName": "ProductCTFile",
						"type": "DatasetReference"
					},
					"name": "CTFile"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ProductsHistoryTable",
						"type": "DatasetReference"
					},
					"name": "ApplyCT"
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "UpdatesAndDeletes"
				},
				{
					"name": "SelectColumns"
				},
				{
					"name": "SetRowCurrentFlag"
				},
				{
					"name": "CTInsertsAndUpdates"
				},
				{
					"name": "IUwithRowMetadata"
				},
				{
					"name": "RowsToInsert"
				},
				{
					"name": "InsertsAndUpdates"
				},
				{
					"name": "SetAction"
				},
				{
					"name": "CTUpdatesAndDeletes"
				},
				{
					"name": "InsertsWithEffectiveDate"
				},
				{
					"name": "UpdatesWithEffectiveDate"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SurrogateKey as integer,",
				"          ProductID as integer,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          Color as string,",
				"          StandardCost as decimal(19,4),",
				"          ListPrice as decimal(19,4),",
				"          Size as string,",
				"          Weight as decimal(8,2),",
				"          SellStartDate as timestamp,",
				"          SellEndDate as timestamp,",
				"          DiscontinuedDate as timestamp,",
				"          ProductModel as string,",
				"          ProductModelDescription as string,",
				"          ProductSubcategory as string,",
				"          ProductCategory as string,",
				"          RowEffectiveDate as timestamp,",
				"          RowExpirationDate as timestamp,",
				"          RowCurrentFlag as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT *\\nFROM presentation.ProductsHistory\\nWHERE RowCurrentFlag = 1',",
				"     format: 'query') ~> ProductsHistoryCurrentRows",
				"source(output(",
				"          current_ct_version as long,",
				"          extraction_time as timestamp,",
				"          ct_key as integer,",
				"          ct_operation as string,",
				"          ct_insertion_time as timestamp,",
				"          ct_last_mod_time as timestamp,",
				"          ProductID as integer,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          Color as string,",
				"          StandardCost as decimal(19,4),",
				"          ListPrice as decimal(19,4),",
				"          Size as string,",
				"          Weight as decimal(8,2),",
				"          SellStartDate as timestamp,",
				"          SellEndDate as timestamp,",
				"          DiscontinuedDate as timestamp,",
				"          ProductModel as string,",
				"          ProductModelDescription as string,",
				"          ProductSubcategory as string,",
				"          ProductCategory as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     partitionBy('hash', 4,",
				"          ct_key",
				"     )) ~> CTFile",
				"CTFile split(equals(ct_operation, 'I'),",
				"     equals(ct_operation, 'U'),",
				"     equals(ct_operation, 'D'),",
				"     disjoint: false) ~> split1@(Inserts, Updates, Deletes)",
				"ProductsHistoryCurrentRows, CTUpdatesAndDeletes join(ProductsHistoryCurrentRows@ProductID == ct_key,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> UpdatesAndDeletes",
				"UpdatesAndDeletes select(mapColumn(",
				"          SurrogateKey,",
				"          ProductID = ProductsHistoryCurrentRows@ProductID,",
				"          Name = ProductsHistoryCurrentRows@Name,",
				"          ProductNumber = ProductsHistoryCurrentRows@ProductNumber,",
				"          Color = ProductsHistoryCurrentRows@Color,",
				"          StandardCost = ProductsHistoryCurrentRows@StandardCost,",
				"          ListPrice = ProductsHistoryCurrentRows@ListPrice,",
				"          Size = ProductsHistoryCurrentRows@Size,",
				"          Weight = ProductsHistoryCurrentRows@Weight,",
				"          SellStartDate = ProductsHistoryCurrentRows@SellStartDate,",
				"          SellEndDate = ProductsHistoryCurrentRows@SellEndDate,",
				"          DiscontinuedDate = ProductsHistoryCurrentRows@DiscontinuedDate,",
				"          ProductModel = ProductsHistoryCurrentRows@ProductModel,",
				"          ProductModelDescription = ProductsHistoryCurrentRows@ProductModelDescription,",
				"          ProductSubcategory = ProductsHistoryCurrentRows@ProductSubcategory,",
				"          ProductCategory = ProductsHistoryCurrentRows@ProductCategory,",
				"          RowEffectiveDate,",
				"          RowExpirationDate = ct_last_mod_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumns",
				"SelectColumns derive(RowCurrentFlag = 0) ~> SetRowCurrentFlag",
				"InsertsWithEffectiveDate, UpdatesWithEffectiveDate union(byName: true)~> CTInsertsAndUpdates",
				"CTInsertsAndUpdates derive(RowExpirationDate = toTimestamp('9999-12-31 00:00:00'),",
				"          RowCurrentFlag = 1) ~> IUwithRowMetadata",
				"IUwithRowMetadata select(mapColumn(",
				"          ProductID,",
				"          Name,",
				"          ProductNumber,",
				"          Color,",
				"          StandardCost,",
				"          ListPrice,",
				"          Size,",
				"          Weight,",
				"          SellStartDate,",
				"          SellEndDate,",
				"          DiscontinuedDate,",
				"          ProductModel,",
				"          ProductModelDescription,",
				"          ProductSubcategory,",
				"          ProductCategory,",
				"          RowEffectiveDate,",
				"          RowExpirationDate,",
				"          RowCurrentFlag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RowsToInsert",
				"SetRowCurrentFlag, RowsToInsert union(byName: true)~> InsertsAndUpdates",
				"InsertsAndUpdates alterRow(insertIf(isNull(SurrogateKey)),",
				"     updateIf(not(isNull(SurrogateKey)))) ~> SetAction",
				"split1@Deletes, split1@Updates union(byName: true)~> CTUpdatesAndDeletes",
				"split1@Inserts derive(RowEffectiveDate = ct_insertion_time) ~> InsertsWithEffectiveDate",
				"split1@Updates derive(RowEffectiveDate = ct_last_mod_time) ~> UpdatesWithEffectiveDate",
				"SetAction sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:[('SurrogateKey')],",
				"     skipKeyWrites:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> ApplyCT"
			]
		}
	}
}